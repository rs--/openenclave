// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

OECI_LIB_VERSION = env.OECI_LIB_VERSION ?: "master"
oe = library("OpenEnclaveCommon@${OECI_LIB_VERSION}").jenkins.common.Openenclave.new()

GLOBAL_TIMEOUT_MINUTES = 120
CTEST_TIMEOUT_SECONDS = 480
GLOBAL_ERROR = null

DOCKER_TAG = env.DOCKER_TAG ?: "latest"
AGENTS_LABELS = [
    "acc-ubuntu-20.04":         env.UBUNTU_2004_CUSTOM_LABEL ?: "ACC-2004",
    "acc-ubuntu-18.04":         env.UBUNTU_1804_CUSTOM_LABEL ?: "ACC-1804",
    "ubuntu-nonsgx":            env.UBUNTU_NONSGX_CUSTOM_LABEL ?: "nonSGX-ubuntu-2004",
    "windows-nonsgx":           env.WINDOWS_NONSGX_CUSTOM_LABEL ?: "nonSGX-Windows",
    "acc-ubuntu-20.04-vanilla": env.UBUNTU_VANILLA_2004_CUSTOM_LABEL ?: "vanilla-ubuntu-2004",
    "acc-ubuntu-18.04-vanilla": env.UBUNTU_VANILLA_1804_CUSTOM_LABEL ?: "vanilla-ubuntu-1804"
]

def BuildCommand(String build_type = "RelWithDebInfo", String code_coverage = "OFF", String debug_malloc = "ON", String lvi_args="", String cmake_args = "") {
    def cmake = """
        echo "Running Build Command"
        cd ${WORKSPACE}
        cmake ${WORKSPACE}                                          \
           -G Ninja                                                 \
           -DCMAKE_INSTALL_PREFIX:PATH='/opt/openenclave'           \
           -DCPACK_GENERATOR=DEB                                    \
           -DCODE_COVERAGE=${code_coverage}                         \
           -DUSE_DEBUG_MALLOC=${debug_malloc}                       \
           -DCMAKE_BUILD_TYPE=${build_type}                         \
           ${lvi_args}                                              \
           ${cmake_args}                                            \
           -Wdev
        ninja -v
    """
    println("CI Command: Build\n"+cmake)
    return cmake
}

def TestCommand() {
    def buildAndTest = """
        echo "Running Test Command"
        cd ${WORKSPACE}
        ctest --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
    """
    println("CI Command: Test Command\n"+buildAndTest)
    return buildAndTest
}

def InstallBuildCommand() {
    def localPackage = """
        echo "Running Install Build Command"
        cd ${WORKSPACE}
        cpack
        sudo ninja -v install
    """
    println("CI Command: Install Build\n"+localPackage)
    return localPackage
}

def InstallReleaseCommand() {
    def install = """
        echo "Running Install Release Command"
        echo 'deb [arch=amd64] https://download.01.org/intel-sgx/sgx_repo/ubuntu bionic main' | sudo tee /etc/apt/sources.list.d/intel-sgx.list
        wget -qO - https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key | sudo apt-key add -

        echo "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-7 main" | sudo tee /etc/apt/sources.list.d/llvm-toolchain-bionic-7.list
        wget -qO - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -

        echo "deb [arch=amd64] https://packages.microsoft.com/ubuntu/18.04/prod bionic main" | sudo tee /etc/apt/sources.list.d/msprod.list
        wget -qO - https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -

        sudo apt update
        sudo apt install -y open-enclave
    """
    println("CI Command: Install Release\n"+install)
    return install
}

def TestSamplesCommand() {
    def samples = """
        echo "Running Test Samples Command"
        cp -r /opt/openenclave/share/openenclave/samples ~/
        cd ~/samples
        source /opt/openenclave/share/openenclave/openenclaverc
        for i in *; do
            if [ -d \${i} ]; then
                cd \${i}
                mkdir build
                cd build
                cmake ..
                make
                make run
                cd ../..
            fi
        done
    """
    println("CI Command: Test Samples\n"+samples)
    return samples
}

def ACCCodeCoverageTest(String label, String compiler, String build_type) {
    stage("${label} ${compiler} ${build_type} Code Coverage") {
        node("${label}") {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                def buildCommand = BuildCommand(build_type)
                def testCommand = TestCommand()
                def task = """
                           ${buildCommand}
                           ${testCommand}
                           ninja code_coverage
                           """
                oe.Run(compiler, task)

                // Publish the report via Cobertura Plugin.
                cobertura coberturaReportFile: 'build/coverage/coverage.xml'

                // Publish the result to the PR(s) via GitHub Coverage reporter Plugin.
                // Workaround to obtain the PR id(s) as Bors does not us to grab them reliably.
                def log = sh (script: "git log -1 | grep -Po '(Try #\\K|Merge #\\K)[^:]*'", returnStdout: true).trim()
                def id_list = log.split(' #')
                id_list.each {
                    echo "PR ID: ${it}, REPOSITORY_NAME: ${REPOSITORY_NAME}"
                    withEnv(["CHANGE_URL=https://github.com/${REPOSITORY_NAME}/pull/${it}"]) {
                        publishCoverageGithub(filepath:'build/coverage/coverage.xml',
                                              coverageXmlType: 'cobertura',
                                              comparisonOption: [ value: 'optionFixedCoverage', fixedCoverage: '0.60' ],
                                              coverageRateType: 'Line')
                    }
                }
            }
        }
    }
}

def ACCTest(String label, String compiler, String build_type, List extra_cmake_args = [], List test_env = [], boolean fresh_install = false) {
    stage("${label} ${compiler} ${build_type}, extra_cmake_args: ${extra_cmake_args}, test_env: ${test_env}${fresh_install ? ", e2e" : ""}") {
        node(label) {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                if (fresh_install) {
                    sh  """
                        sudo bash scripts/ansible/install-ansible.sh
                        # Run ACC Playbook
                        for i in 1 2 3 4 5
                        do
                            sudo \$(which ansible-playbook) scripts/ansible/oe-contributors-acc-setup.yml && break
                            sleep 60
                        done
                        """
                }
                def buildCommand = BuildCommand(build_type,"OFF","ON","-DLVI_MITIGATION_BINDIR=/usr/local/lvi-mitigation/bin",extra_cmake_args.join(' '))
                def testCommand = TestCommand()
                def task = """
                           ${buildCommand}
                           ${testCommand}
                           """
                withEnv(test_env) {
                    oe.Run(compiler, task)
                }
            }
        }
    }
}

def ACCUpgradeTest(String label, String version, List extra_cmake_args = []) {
    stage("${label} Container ${version} RelWithDebInfo, extra_cmake_args: ${extra_cmake_args}") {
        node("${label}") {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                def releaseInstall = InstallReleaseCommand()
                def samples = TestSamplesCommand()
                def buildCommand = BuildCommand("RelWithDebInfo","OFF","ON","-DLVI_MITIGATION_BINDIR=/usr/local/lvi-mitigation/bin",extra_cmake_args.join(' '))
                def buildInstall = InstallBuildCommand()
                def task = """
                           ${buildCommand}
                           ${buildInstall}
                           ${samples}
                           """
                oe.ContainerRun("oetools-${version}:${DOCKER_TAG}", "clang-10", task, "--cap-add=SYS_PTRACE --device /dev/sgx:/dev/sgx --volume /var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket")
            }
        }
    }
}

def ACCContainerTest(String label, String version, List extra_cmake_args = []) {
    stage("${label} Container ${version} RelWithDebInfo, extra_cmake_args: ${extra_cmake_args}") {
        node("${label}") {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                def buildCommand = BuildCommand("RelWithDebInfo","OFF","ON","-DLVI_MITIGATION_BINDIR=/usr/local/lvi-mitigation/bin",extra_cmake_args.join(' '))
                def testCommand = TestCommand()
                def task = """
                           ${buildCommand}
                           ${testCommand}
                           """
                oe.ContainerRun("oetools-${version}:${DOCKER_TAG}", "clang-10", task, "--cap-add=SYS_PTRACE --device /dev/sgx:/dev/sgx --volume /var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket")
            }
        }
    }
}

def ACCPackageTest(String label, String version, List extra_cmake_args = []) {
    stage("${label} PackageTest ${version} RelWithDebInfo, extra_cmake_args: ${extra_cmake_args}") {
        node("${label}") {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                def buildCommand = BuildCommand("RelWithDebInfo","OFF","ON","-DLVI_MITIGATION_BINDIR=/usr/local/lvi-mitigation/bin",extra_cmake_args.join(' '))
                def buildInstall = InstallBuildCommand()
                def samples = TestSamplesCommand()
                def task = """
                           ${buildCommand}
                           ${buildInstall}
                           ${samples}
                           """
                oe.ContainerRun("oetools-${version}:${DOCKER_TAG}", "clang-10", task, "--cap-add=SYS_PTRACE --device /dev/sgx:/dev/sgx --volume /var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket")
            }
        }
    }
}

def ACCHostVerificationTest(String version, String build_type) {
    /* Compile tests in SGX machine.  This will generate the necessary certs for the
    * host_verify test.
    */
    stage("ACC-1804 Generate Quote") {
        node(AGENTS_LABELS["acc-ubuntu-18.04"]) {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm

                println("Generating certificates and reports ...")
                def task = """
                           cmake ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=${build_type} -Wdev
                           ninja -v
                           pushd tests/host_verify/host
                           openssl ecparam -name prime256v1 -genkey -noout -out keyec.pem
                           openssl ec -in keyec.pem -pubout -out publicec.pem
                           openssl genrsa -out keyrsa.pem 2048
                           openssl rsa -in keyrsa.pem -outform PEM -pubout -out publicrsa.pem
                           ../../../output/bin/oeutil gen --format cert keyec.pem publicec.pem --out sgx_cert_ec.der --verify
                           ../../../output/bin/oeutil gen --format cert keyrsa.pem publicrsa.pem --out sgx_cert_rsa.der --verify
                           ../../../output/bin/oeutil gen --format legacy_report_remote --out sgx_report.bin --verify
                           ../../../output/bin/oeutil gen --format sgx_ecdsa --out sgx_evidence.bin --endorsements sgx_endorsements.bin --verify
                           ../../../output/bin/oeutil gen --format sgx_ecdsa --quote-proc in --verify
                           ../../../output/bin/oeutil gen --format sgx_ecdsa --quote-proc out --verify
                           popd
                           """
                oe.ContainerRun("oetools-${version}:${DOCKER_TAG}", "clang-10", task, "--cap-add=SYS_PTRACE --device /dev/sgx:/dev/sgx --volume /var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket")

                def ec_cert_created = fileExists 'build/tests/host_verify/host/sgx_cert_ec.der'
                def rsa_cert_created = fileExists 'build/tests/host_verify/host/sgx_cert_rsa.der'
                def report_created = fileExists 'build/tests/host_verify/host/sgx_report.bin'
                def evidence_created = fileExists 'build/tests/host_verify/host/sgx_evidence.bin'
                if (ec_cert_created) {
                    println("EC cert file created successfully!")
                } else {
                    error("Failed to create EC cert file.")
                }
                if (rsa_cert_created) {
                    println("RSA cert file created successfully!")
                } else {
                    error("Failed to create RSA cert file.")
                }
                if (report_created) {
                    println("SGX report file created successfully!")
                } else {
                    error("Failed to create SGX report file.")
                }
                if (evidence_created) {
                    println("SGX evidence file created successfully!")
                } else {
                    error("Failed to create SGX evidence file.")
                }

                stash includes: 'build/tests/host_verify/host/*.der,build/tests/host_verify/host/*.bin', name: "linux_host_verify-${version}-${build_type}-${BUILD_NUMBER}"
            }
        }
    }

    /* Compile the tests and unstash the certs over for verification.  */
    stage("Linux nonSGX Verify Quote") {
        node(AGENTS_LABELS["ubuntu-nonsgx"]) {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                unstash "linux_host_verify-${version}-${build_type}-${BUILD_NUMBER}"
                def task = """
                           cmake ${WORKSPACE} -G Ninja -DBUILD_ENCLAVES=OFF -DCMAKE_BUILD_TYPE=${build_type} -Wdev
                           ninja -v
                           ctest -R host_verify --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                           """
                // Note: Include the commands to build and run the quote verification test above
                oe.ContainerRun("oetools-${version}:${DOCKER_TAG}", "clang-10", task, "--cap-add=SYS_PTRACE")
            }
        }
    }

    /* Windows nonSGX stage. */
    stage("Windows nonSGX Verify Quote") {
        node(AGENTS_LABELS["windows-nonsgx"]) {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                unstash "linux_host_verify-${version}-${build_type}-${BUILD_NUMBER}"
                dir('build') {
                    bat """
                        vcvars64.bat x64 && \
                        cmake.exe ${WORKSPACE} -G Ninja -DBUILD_ENCLAVES=OFF -DCMAKE_BUILD_TYPE=${build_type} -DNUGET_PACKAGE_PATH=C:/oe_prereqs -Wdev && \
                        ninja -v && \
                        ctest.exe -V -C ${build_type} -R host_verify --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                        """
                }
            }
        }
    }
}

def ACCHostVerificationPackageTest(String version, String build_type) {
    /* Generate an SGX report and two SGX certificates for the host_verify sample.
    * Also generate and install the host_verify package. Then run the host_verify sample.
    */
    stage("ACC-1804 Generate Quote") {
        node(AGENTS_LABELS["acc-ubuntu-18.04"]) {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm

                println("Generating certificates and reports ...")
                def task = """
                           cmake ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=${build_type} -Wdev
                           ninja -v
                           pushd tests/host_verify/host
                           openssl ecparam -name prime256v1 -genkey -noout -out keyec.pem
                           openssl ec -in keyec.pem -pubout -out publicec.pem
                           openssl genrsa -out keyrsa.pem 2048
                           openssl rsa -in keyrsa.pem -outform PEM -pubout -out publicrsa.pem
                           ../../../output/bin/oeutil gen --format cert keyec.pem publicec.pem --out sgx_cert_ec.der --verify
                           ../../../output/bin/oeutil gen --format cert keyrsa.pem publicrsa.pem --out sgx_cert_rsa.der --verify
                           ../../../output/bin/oeutil gen --format legacy_report_remote --out sgx_report.bin --verify
                           ../../../output/bin/oeutil gen --format sgx_ecdsa --out sgx_evidence.bin --endorsements sgx_endorsements.bin --verify
                           ../../../output/bin/oeutil gen --format sgx_ecdsa --quote-proc in --verify
                           ../../../output/bin/oeutil gen --format sgx_ecdsa --quote-proc out --verify
                           popd
                           """
                oe.ContainerRun("oetools-${version}:${DOCKER_TAG}", "clang-10", task, "--cap-add=SYS_PTRACE --device /dev/sgx:/dev/sgx --volume /var/run/aesmd/aesm.socket:/var/run/aesmd/aesm.socket")

                def ec_cert_created = fileExists 'build/tests/host_verify/host/sgx_cert_ec.der'
                def rsa_cert_created = fileExists 'build/tests/host_verify/host/sgx_cert_rsa.der'
                def report_created = fileExists 'build/tests/host_verify/host/sgx_report.bin'
                def evidence_created = fileExists 'build/tests/host_verify/host/sgx_evidence.bin'
                if (ec_cert_created) {
                    println("EC cert file created successfully!")
                } else {
                    error("Failed to create EC cert file.")
                }
                if (rsa_cert_created) {
                    println("RSA cert file created successfully!")
                } else {
                    error("Failed to create RSA cert file.")
                }
                if (report_created) {
                    println("SGX report file created successfully!")
                } else {
                    error("Failed to create SGX report file.")
                }
                if (evidence_created) {
                    println("SGX evidence file created successfully!")
                } else {
                    error("Failed to create SGX evidence file.")
                }

                stash includes: 'build/tests/host_verify/host/*.der,build/tests/host_verify/host/*.bin', name: "linux_host_verify-${version}-${build_type}-${BUILD_NUMBER}"
            }
        }
    }

    /* Linux nonSGX stage. */
    stage("Linux nonSGX Verify Quote") {
        node(AGENTS_LABELS["ubuntu-nonsgx"]) {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                unstash "linux_host_verify-${version}-${build_type}-${BUILD_NUMBER}"
                def task = """
                           cmake ${WORKSPACE} \
                             -DBUILD_ENCLAVES=OFF \
                             -DCMAKE_BUILD_TYPE=${build_type} \
                             -DCMAKE_INSTALL_PREFIX=/opt/openenclave \
                             -DCOMPONENT=OEHOSTVERIFY \
                             -Wdev
                           make VERBOSE=1
                           cpack -G DEB -D CPACK_DEB_COMPONENT_INSTALL=ON -D CPACK_COMPONENTS_ALL=OEHOSTVERIFY
                           if [ -d /opt/openenclave ]; then sudo rm -r /opt/openenclave; fi
                           sudo dpkg -i open-enclave-hostverify*.deb
                           cp tests/host_verify/host/*.der ${WORKSPACE}/samples/host_verify
                           cp tests/host_verify/host/*.bin ${WORKSPACE}/samples/host_verify
                           pushd ${WORKSPACE}/samples/host_verify
                           if [ ! -d build ]; then mkdir build; fi
                           cd build
                           cmake ..  -DBUILD_ENCLAVES=OFF -DCMAKE_BUILD_TYPE=${build_type} -Wdev
                           make VERBOSE=1
                           ./host_verify -r ../sgx_report.bin
                           ./host_verify -c ../sgx_cert_ec.der
                           ./host_verify -c ../sgx_cert_rsa.der
                           popd
                           """
                // Note: Include the commands to build and run the quote verification test above
                oe.ContainerRun("oetools-${version}:${DOCKER_TAG}", "clang-10", task, "--cap-add=SYS_PTRACE")
            }
        }
    }

    /* Windows nonSGX stage. */
    stage("Windows nonSGX Verify Quote") {
        node(AGENTS_LABELS["windows-nonsgx"]) {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                unstash "linux_host_verify-${version}-${build_type}-${BUILD_NUMBER}"
                dir('build') {
                    bat """
                        vcvars64.bat x64 && \
                        cmake.exe ${WORKSPACE} \
                          -G Ninja \
                          -DBUILD_ENCLAVES=OFF \
                          -DCMAKE_BUILD_TYPE=${build_type} \
                          -DCOMPONENT=OEHOSTVERIFY \
                          -DCPACK_GENERATOR=NuGet \
                          -DNUGET_PACKAGE_PATH=C:/oe_prereqs \
                          -Wdev && \
                        ninja -v && \
                        cpack -D CPACK_NUGET_COMPONENT_INSTALL=ON -DCPACK_COMPONENTS_ALL=OEHOSTVERIFY && \
                        copy tests\\host_verify\\host\\*.der ${WORKSPACE}\\samples\\host_verify && \
                        copy tests\\host_verify\\host\\*.bin ${WORKSPACE}\\samples\\host_verify && \
                        if exist C:\\oe (rmdir C:\\oe) && \
                        nuget.exe install open-enclave.OEHOSTVERIFY -Source ${WORKSPACE}\\build -OutputDirectory C:\\oe -ExcludeVersion && \
                        xcopy /E C:\\oe\\open-enclave.OEHOSTVERIFY\\openenclave C:\\openenclave\\ && \
                        pushd ${WORKSPACE}\\samples\\host_verify && \
                        if not exist build\\ (mkdir build) && \
                        cd build && \
                        cmake.exe .. \
                          -G Ninja \
                          -DBUILD_ENCLAVES=OFF \
                          -DCMAKE_BUILD_TYPE=${build_type} \
                          -DCMAKE_PREFIX_PATH=C:/openenclave/lib/openenclave/cmake \
                          -DNUGET_PACKAGE_PATH=C:/oe_prereqs \
                          -Wdev && \
                        ninja -v && \
                        host_verify.exe -r ../sgx_report.bin && \
                        host_verify.exe -c ../sgx_cert_ec.der && \
                        host_verify.exe -c ../sgx_cert_rsa.der && \
                        popd
                        """
                }
            }
        }
    }
}

properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '90',
                                      artifactNumToKeepStr: '180',
                                      daysToKeepStr: '90',
                                      numToKeepStr: '180')),
            [$class: 'JobRestrictionProperty']])

try{
    oe.emailJobStatus('STARTED')
    def testing_stages = [:]
    if(FULL_TEST_SUITE == "true") {
        stage("Full Test Suite") {
            testing_stages += [
                "Host verification 2004 Debug": { ACCHostVerificationTest('20.04', 'Debug') },
                "Host verification 1804 Debug": { ACCHostVerificationTest('18.04', 'Debug') },

                "Host verification package 2004 Debug": { ACCHostVerificationPackageTest('20.04', 'Debug') },
                "Host verification package 1804 Debug": { ACCHostVerificationPackageTest('18.04', 'Debug') },

                "ACC2004 Package RelWithDebInfo":              { ACCPackageTest(AGENTS_LABELS["acc-ubuntu-20.04"], '20.04', ['-DLVI_MITIGATION=None',        '-DLVI_MITIGATION_SKIP_TESTS=OFF']) },
                "ACC2004 Package RelWithDebInfo LVI":          { ACCPackageTest(AGENTS_LABELS["acc-ubuntu-20.04"], '20.04', ['-DLVI_MITIGATION=ControlFlow', '-DLVI_MITIGATION_SKIP_TESTS=OFF']) },
                "ACC1804 Package RelWithDebInfo":              { ACCPackageTest(AGENTS_LABELS["acc-ubuntu-18.04"], '18.04', ['-DLVI_MITIGATION=None',        '-DLVI_MITIGATION_SKIP_TESTS=OFF']) },
                "ACC1804 Package RelWithDebInfo LVI":          { ACCPackageTest(AGENTS_LABELS["acc-ubuntu-18.04"], '18.04', ['-DLVI_MITIGATION=ControlFlow', '-DLVI_MITIGATION_SKIP_TESTS=OFF']) },

                "ACC2004 Container RelWithDebInfo":     { ACCContainerTest(AGENTS_LABELS["acc-ubuntu-20.04"], '20.04', ['-DLVI_MITIGATION=None',        '-DLVI_MITIGATION_SKIP_TESTS=OFF']) },
                "ACC2004 Container RelWithDebInfo LVI": { ACCContainerTest(AGENTS_LABELS["acc-ubuntu-20.04"], '20.04', ['-DLVI_MITIGATION=ControlFlow', '-DLVI_MITIGATION_SKIP_TESTS=OFF']) },
                "ACC1804 Container RelWithDebInfo":     { ACCContainerTest(AGENTS_LABELS["acc-ubuntu-18.04"], '18.04', ['-DLVI_MITIGATION=None',        '-DLVI_MITIGATION_SKIP_TESTS=OFF']) },
                "ACC1804 Container RelWithDebInfo LVI": { ACCContainerTest(AGENTS_LABELS["acc-ubuntu-18.04"], '18.04', ['-DLVI_MITIGATION=ControlFlow', '-DLVI_MITIGATION_SKIP_TESTS=OFF']) },

                "ACC2004 clang-10 Debug":                           { ACCTest(AGENTS_LABELS["acc-ubuntu-20.04"],         'clang-10', 'Debug',                  ['-DLVI_MITIGATION=None',        '-DLVI_MITIGATION_SKIP_TESTS=OFF']) },
                "ACC2004 clang-10 RelWithDebInfo":                  { ACCTest(AGENTS_LABELS["acc-ubuntu-20.04"],         'clang-10', 'RelWithDebInfo',         ['-DLVI_MITIGATION=None',        '-DLVI_MITIGATION_SKIP_TESTS=OFF']) },
                "ACC2004 clang-10 Debug LVI":                       { ACCTest(AGENTS_LABELS["acc-ubuntu-20.04"],         'clang-10', 'Debug',                  ['-DLVI_MITIGATION=ControlFlow', '-DLVI_MITIGATION_SKIP_TESTS=OFF']) },
                "ACC2004 clang-10 RelWithDebInfo LVI":              { ACCTest(AGENTS_LABELS["acc-ubuntu-20.04"],         'clang-10', 'RelWithDebInfo',         ['-DLVI_MITIGATION=ControlFlow', '-DLVI_MITIGATION_SKIP_TESTS=OFF']) },
                "ACC1804 clang-10 Debug":                           { ACCTest(AGENTS_LABELS["acc-ubuntu-18.04"],         'clang-10', 'Debug',                  ['-DLVI_MITIGATION=None',        '-DLVI_MITIGATION_SKIP_TESTS=OFF']) },
                "ACC1804 clang-10 RelWithDebInfo":                  { ACCTest(AGENTS_LABELS["acc-ubuntu-18.04"],         'clang-10', 'RelWithDebInfo',         ['-DLVI_MITIGATION=None',        '-DLVI_MITIGATION_SKIP_TESTS=OFF']) },
                "ACC1804 clang-10 Debug LVI":                       { ACCTest(AGENTS_LABELS["acc-ubuntu-18.04"],         'clang-10', 'Debug',                  ['-DLVI_MITIGATION=ControlFlow', '-DLVI_MITIGATION_SKIP_TESTS=OFF']) },
                "ACC1804 clang-10 RelWithDebInfo LVI":              { ACCTest(AGENTS_LABELS["acc-ubuntu-18.04"],         'clang-10', 'RelWithDebInfo',         ['-DLVI_MITIGATION=ControlFlow', '-DLVI_MITIGATION_SKIP_TESTS=OFF']) },

                "ACC2004 clang-10 RelWithDebInfo LVI e2e":          { ACCTest(AGENTS_LABELS["acc-ubuntu-20.04-vanilla"], 'clang-10', 'RelWithDebInfo', ['-DLVI_MITIGATION=ControlFlow', '-DLVI_MITIGATION_SKIP_TESTS=OFF'], [], true) },
                "ACC1804 clang-10 Debug LVI e2e":                   { ACCTest(AGENTS_LABELS["acc-ubuntu-18.04-vanilla"], 'clang-10', 'Debug',          ['-DLVI_MITIGATION=ControlFlow', '-DLVI_MITIGATION_SKIP_TESTS=OFF'], [], true) },
                "ACC1804 clang-10 RelWithDebInfo LVI e2e":          { ACCTest(AGENTS_LABELS["acc-ubuntu-18.04-vanilla"], 'clang-10', 'RelWithDebInfo', ['-DLVI_MITIGATION=ControlFlow', '-DLVI_MITIGATION_SKIP_TESTS=OFF'], [], true) },

                "ACC2004 Package RelWithDebInfo LVI snmalloc": { ACCPackageTest(AGENTS_LABELS["acc-ubuntu-20.04"], '20.04', ['-DLVI_MITIGATION=ControlFlow', '-DLVI_MITIGATION_SKIP_TESTS=OFF', '-DUSE_SNMALLOC=ON']) },
                "ACC1804 Package RelWithDebInfo LVI snmalloc": { ACCPackageTest(AGENTS_LABELS["acc-ubuntu-18.04"], '18.04', ['-DLVI_MITIGATION=ControlFlow', '-DLVI_MITIGATION_SKIP_TESTS=OFF', '-DUSE_SNMALLOC=ON']) },

                "ACC2004 clang-10 RelWithDebInfo LVI e2e snmalloc": { ACCTest(AGENTS_LABELS["acc-ubuntu-20.04-vanilla"], 'clang-10', 'RelWithDebInfo', ['-DLVI_MITIGATION=ControlFlow', '-DLVI_MITIGATION_SKIP_TESTS=OFF', '-DUSE_SNMALLOC=ON'], [], true) },
                "ACC1804 clang-10 Debug LVI e2e snmalloc":          { ACCTest(AGENTS_LABELS["acc-ubuntu-18.04-vanilla"], 'clang-10', 'Debug',          ['-DLVI_MITIGATION=ControlFlow', '-DLVI_MITIGATION_SKIP_TESTS=OFF', '-DUSE_SNMALLOC=ON'], [], true) },
                "ACC1804 clang-10 RelWithDebInfo LVI e2e snmalloc": { ACCTest(AGENTS_LABELS["acc-ubuntu-18.04-vanilla"], 'clang-10', 'RelWithDebInfo', ['-DLVI_MITIGATION=ControlFlow', '-DLVI_MITIGATION_SKIP_TESTS=OFF', '-DUSE_SNMALLOC=ON'], [], true) },
                "ACC2004 clang-10 RelWithDebInfo LVI snmalloc":     { ACCTest(AGENTS_LABELS["acc-ubuntu-20.04"],         'clang-10', 'RelWithDebInfo', ['-DLVI_MITIGATION=ControlFlow', '-DLVI_MITIGATION_SKIP_TESTS=OFF', '-DUSE_SNMALLOC=ON']) }
            ]
            parallel testing_stages
        }
    } else {
        stage("PR Testing") {
            testing_stages += [
                "ACC1804 Package RelWithDebInfo LVI":              { ACCUpgradeTest(AGENTS_LABELS["acc-ubuntu-18.04"], '18.04', ['-DLVI_MITIGATION=None', '-DLVI_MITIGATION_SKIP_TESTS=ON']) }
                ]
            parallel testing_stages
        }
    }
} catch(Exception e) {
    println "Caught global pipeline exception: " + e
    GLOBAL_ERROR = e
    throw e
} finally {
    currentBuild.result = (GLOBAL_ERROR != null) ? 'FAILURE' : "SUCCESS"
    oe.emailJobStatus(currentBuild.result)
}
