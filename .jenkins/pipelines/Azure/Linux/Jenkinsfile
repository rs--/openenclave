// Copyright (c) Open Enclave SDK contributors.
// Licensed under the MIT License.

OECI_LIB_VERSION = env.OECI_LIB_VERSION ?: "master"
oe = library("OpenEnclaveCommon@${OECI_LIB_VERSION}").jenkins.common.Openenclave.new()

GLOBAL_TIMEOUT_MINUTES = 240
CTEST_TIMEOUT_SECONDS = 480
GLOBAL_ERROR = null

DOCKER_TAG = env.DOCKER_TAG ?: "latest"
AGENTS_LABELS = [
    "acc-ubuntu-16.04": env.UBUNTU_1604_CUSTOM_LABEL ?: "ACC-1604",
    "acc-ubuntu-18.04": env.UBUNTU_1804_CUSTOM_LABEL ?: "ACC-1804",
    "acc-rhel-8":       env.RHEL_8_CUSTOM_LABEL ?: "ACC-RHEL-8",
    "ubuntu-nonsgx":    env.UBUNTU_NONSGX_CUSTOM_LABEL ?: "nonSGX",
    "windows-nonsgx":   env.WINDOWS_NONSGX_CUSTOM_LABEL ?: "nonSGX-Windows"
]


def ACCTest(String label, String compiler, String build_type, String lvi_mitigation = 'None', String lvi_mitigation_skip_tests = 'OFF', boolean fresh_install = false) {
    stage("${label} ${compiler} SGX1FLC ${build_type} LVI_MITIGATION=${lvi_mitigation}${fresh_install?" E2E" : ""}") {
        node("${label}") {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                if (fresh_install) {
                    sh "sudo bash scripts/ansible/install-ansible.sh && sudo ansible-playbook scripts/ansible/oe-contributors-acc-setup.yml"
                }
                def task = """
                           cmake ${WORKSPACE}                                           \
                               -G Ninja                                                 \
                               -DCMAKE_BUILD_TYPE=${build_type}                         \
                               -DLVI_MITIGATION=${lvi_mitigation}                       \
                               -DLVI_MITIGATION_BINDIR=/usr/local/lvi-mitigation/bin    \
                               -DLVI_MITIGATION_SKIP_TESTS=${lvi_mitigation_skip_tests} \
                               -Wdev
                           ninja -v
                           ctest --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                           """
                oe.Run(compiler, task)
            }
        }
    }
}

def ACCGNUTest() {
    stage("ACC1804 GNU gcc SGX1FLC") {
        node(AGENTS_LABELS["acc-ubuntu-18.04"]) {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                def task = """
                           cmake ${WORKSPACE} -DHAS_QUOTE_PROVIDER=ON
                           make
                           ctest --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                           """
                oe.Run("gcc", task)
            }
        }
    }
}

def ACCContainerTest(String label, String version, String lvi_mitigation = 'None', String lvi_mitigation_skip_tests = 'OFF') {
    stage("${label} Container RelWithDebInfo LVI_MITIGATION=${lvi_mitigation}") {
        node("${label}") {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                def task = """
                           cmake ${WORKSPACE}                                           \
                               -G Ninja                                                 \
                               -DCMAKE_BUILD_TYPE=RelWithDebInfo                        \
                               -DLVI_MITIGATION=${lvi_mitigation}                       \
                               -DLVI_MITIGATION_BINDIR=/usr/local/lvi-mitigation/bin    \
                               -DLVI_MITIGATION_SKIP_TESTS=${lvi_mitigation_skip_tests} \
                               -Wdev
                           ninja -v
                           ctest --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                           """
                oe.ContainerRun("oetools-full-${version}:${DOCKER_TAG}", "clang-7", task, "--cap-add=SYS_PTRACE --device /dev/sgx:/dev/sgx")
            }
        }
    }
}

def ACCPackageTest(String label, String version, String lvi_mitigation = 'None', String lvi_mitigation_skip_tests = 'OFF') {
    stage("${label} Container RelWithDebInfo LVI_MITIGATION=${lvi_mitigation}") {
        node("${label}") {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                def task = """
                           cmake ${WORKSPACE}                                         \
                             -G Ninja                                                 \
                             -DCMAKE_BUILD_TYPE=RelWithDebInfo                        \
                             -DCMAKE_INSTALL_PREFIX:PATH='/opt/openenclave'           \
                             -DCPACK_GENERATOR=DEB                                    \
                             -DLVI_MITIGATION=${lvi_mitigation}                       \
                             -DLVI_MITIGATION_BINDIR=/usr/local/lvi-mitigation/bin    \
                             -DLVI_MITIGATION_SKIP_TESTS=${lvi_mitigation_skip_tests} \
                             -Wdev
                           ninja -v
                           ninja -v package
                           sudo ninja -v install
                           cp -r /opt/openenclave/share/openenclave/samples ~/
                           cd ~/samples
                           source /opt/openenclave/share/openenclave/openenclaverc
                           for i in *; do
                               if [ -d \${i} ]; then
                                   cd \${i}
                                   mkdir build
                                   cd build
                                   cmake ..
                                   make
                                   make run
                                   cd ../..
                               fi
                           done
                           """
                oe.ContainerRun("oetools-full-${version}:${DOCKER_TAG}", "clang-7", task, "--cap-add=SYS_PTRACE --device /dev/sgx:/dev/sgx")
            }
        }
    }
}

def ACCHostVerificationTest(String version, String build_type) {

        /* Compile tests in SGX machine.  This will generate the necessary certs for the
        * host_verify test.
        */
        stage("ACC-1804 Generate Quote") {
            node(AGENTS_LABELS["acc-ubuntu-18.04"]) {
                timeout(GLOBAL_TIMEOUT_MINUTES) {
                    cleanWs()
                    checkout scm

                    println("Generating certificates and reports ...")
                    def task = """
                            cmake ${WORKSPACE} -G Ninja -DHAS_QUOTE_PROVIDER=ON -DCMAKE_BUILD_TYPE=${build_type} -Wdev
                            ninja -v
                            pushd tests/host_verify/host
                            openssl ecparam -name prime256v1 -genkey -noout -out keyec.pem
                            openssl ec -in keyec.pem -pubout -out publicec.pem
                            openssl genrsa -out keyrsa.pem 2048
                            openssl rsa -in keyrsa.pem -outform PEM -pubout -out publicrsa.pem
                            ../../tools/oecert/host/oecert ../../tools/oecert/enc/oecert_enc --cert keyec.pem publicec.pem --out sgx_cert_ec.der
                            ../../tools/oecert/host/oecert ../../tools/oecert/enc/oecert_enc --cert keyrsa.pem publicrsa.pem --out sgx_cert_rsa.der
                            ../../tools/oecert/host/oecert ../../tools/oecert/enc/oecert_enc --report --out sgx_report.bin
                            popd
                            """
                    oe.ContainerRun("oetools-full-${version}:${DOCKER_TAG}", "clang-7", task, "--cap-add=SYS_PTRACE --device /dev/sgx:/dev/sgx")

                    def ec_cert_created = fileExists 'build/tests/host_verify/host/sgx_cert_ec.der'
                    def rsa_cert_created = fileExists 'build/tests/host_verify/host/sgx_cert_rsa.der'
                    def report_created = fileExists 'build/tests/host_verify/host/sgx_report.bin'
                    if (ec_cert_created) {
                        println("EC cert file created successfully!")
                    } else {
                        error("Failed to create EC cert file.")
                    }
                    if (rsa_cert_created) {
                        println("RSA cert file created successfully!")
                    } else {
                        error("Failed to create RSA cert file.")
                    }
                    if (report_created) {
                        println("SGX report file created successfully!")
                    } else {
                        error("Failed to create SGX report file.")
                    }

                    stash includes: 'build/tests/host_verify/host/*.der,build/tests/host_verify/host/*.bin', name: "linux_host_verify-${version}-${build_type}-${BUILD_NUMBER}"
                }
            }
        }

        /* Compile the tests with HAS_QUOTE_PROVIDER=OFF and unstash the certs over for verification.  */
        stage("Linux nonSGX Verify Quote") {
            node(AGENTS_LABELS["ubuntu-nonsgx"]) {
                timeout(GLOBAL_TIMEOUT_MINUTES) {
                    cleanWs()
                    checkout scm
                    unstash "linux_host_verify-${version}-${build_type}-${BUILD_NUMBER}"
                    def task = """
                            cmake ${WORKSPACE} -G Ninja -DBUILD_ENCLAVES=OFF -DHAS_QUOTE_PROVIDER=OFF -DCMAKE_BUILD_TYPE=${build_type} -Wdev
                            ninja -v
                            ctest -R host_verify --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                            """
                    // Note: Include the commands to build and run the quote verification test above
                    oe.ContainerRun("oetools-full-${version}:${DOCKER_TAG}", "clang-7", task, "--cap-add=SYS_PTRACE")
                }
            }
        }

        /* Windows nonSGX stage. */
        stage("Windows nonSGX Verify Quote") {
            node(AGENTS_LABELS["windows-nonsgx"]) {
                timeout(GLOBAL_TIMEOUT_MINUTES) {
                    cleanWs()
                    checkout scm
                    unstash "linux_host_verify-${version}-${build_type}-${BUILD_NUMBER}"
                    dir('build') {
                        bat """
                            vcvars64.bat x64 && \
                            cmake.exe ${WORKSPACE} -G Ninja -DBUILD_ENCLAVES=OFF -DHAS_QUOTE_PROVIDER=OFF -DCMAKE_BUILD_TYPE=${build_type} -DNUGET_PACKAGE_PATH=C:/oe_prereqs -Wdev && \
                            ninja -v && \
                            ctest.exe -V -C ${build_type} -R host_verify --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                            """
                    }
                }
            }
        }
 }

def RHEL8Test(String compiler, String build_type, List test_env = []) {
    stage("ACC-RHEL-8 ${compiler} ${build_type}, test_env: ${test_env}") {
        node(AGENTS_LABELS["acc-rhel-8"]) {
            timeout(GLOBAL_TIMEOUT_MINUTES) {
                cleanWs()
                checkout scm
                def task = """
                           cmake ${WORKSPACE} -G Ninja -DCMAKE_BUILD_TYPE=${build_type} -DHAS_QUOTE_PROVIDER=OFF -Wdev
                           ninja -v
                           ctest --output-on-failure --timeout ${CTEST_TIMEOUT_SECONDS}
                           """
                withEnv(test_env) {
                    oe.Run(compiler, task)
                }
            }
        }
    }
}

properties([buildDiscarder(logRotator(artifactDaysToKeepStr: '90',
                                      artifactNumToKeepStr: '180',
                                      daysToKeepStr: '90',
                                      numToKeepStr: '180')),
            [$class: 'JobRestrictionProperty']])

try{
    oe.emailJobStatus('STARTED')
    stage("PR Testing") {
        parallel "ACC1604 clang-7 Debug LVI" :                              { ACCTest(AGENTS_LABELS["acc-ubuntu-16.04"], 'clang-7', 'Debug', 'ControlFlow', 'ON') },
                 "ACC1604 clang-7 Debug LVI e2e" :                          { ACCTest(AGENTS_LABELS["acc-ubuntu-16.04"], 'clang-7', 'Debug', 'ControlFlow', 'ON', true) },
                 "ACC1604 clang-7 Release LVI" :                            { ACCTest(AGENTS_LABELS["acc-ubuntu-16.04"], 'clang-7', 'Release', 'ControlFlow', 'ON') },
                 "ACC1604 clang-7 Release LVI e2e" :                        { ACCTest(AGENTS_LABELS["acc-ubuntu-16.04"], 'clang-7', 'Release', 'ControlFlow', 'ON', true) },
                 "ACC1604 gcc Debug LVI" :                                  { ACCTest(AGENTS_LABELS["acc-ubuntu-16.04"], 'gcc', 'Debug', 'ControlFlow', 'ON') },
                 "ACC1604 gcc Debug LVI e2e" :                              { ACCTest(AGENTS_LABELS["acc-ubuntu-16.04"], 'gcc', 'Debug', 'ControlFlow', 'ON', true) },
                 "ACC1604 gcc Release LVI" :                                { ACCTest(AGENTS_LABELS["acc-ubuntu-16.04"], 'gcc', 'Release', 'ControlFlow', 'ON') },
                 "ACC1604 gcc Release LVI e2e" :                            { ACCTest(AGENTS_LABELS["acc-ubuntu-16.04"], 'gcc', 'Release', 'ControlFlow', 'ON', true) },
                 "ACC1804 clang-7 Debug LVI" :                              { ACCTest(AGENTS_LABELS["acc-ubuntu-18.04"], 'clang-7', 'Debug', 'ControlFlow', 'ON') },
                 "ACC1804 clang-7 Debug LVI e2e" :                          { ACCTest(AGENTS_LABELS["acc-ubuntu-18.04"], 'clang-7', 'Debug', 'ControlFlow', 'ON', true) },
                 "ACC1804 clang-7 Release LVI" :                            { ACCTest(AGENTS_LABELS["acc-ubuntu-18.04"], 'clang-7', 'Release', 'ControlFlow', 'ON') },
                 "ACC1804 clang-7 Release LVI e2e" :                        { ACCTest(AGENTS_LABELS["acc-ubuntu-18.04"], 'clang-7', 'Release', 'ControlFlow', 'ON', true) },
                 "ACC1804 gcc Debug LVI" :                                  { ACCTest(AGENTS_LABELS["acc-ubuntu-18.04"], 'gcc', 'Debug', 'ControlFlow', 'ON') },
                 "ACC1804 gcc Debug LVI e2e" :                              { ACCTest(AGENTS_LABELS["acc-ubuntu-18.04"], 'gcc', 'Debug', 'ControlFlow', 'ON', true) },
                 "ACC1804 gcc Release LVI" :                                { ACCTest(AGENTS_LABELS["acc-ubuntu-18.04"], 'gcc', 'Release', 'ControlFlow', 'ON') },
                 "ACC1804 gcc Release LVI e2e" :                                { ACCTest(AGENTS_LABELS["acc-ubuntu-18.04"], 'gcc', 'Release', 'ControlFlow', 'ON', true) }
    }
} catch(Exception e) {
    println "Caught global pipeline exception :" + e
    GLOBAL_ERROR = e
    throw e
} finally {
    currentBuild.result = (GLOBAL_ERROR != null) ? 'FAILURE' : "SUCCESS"
    oe.emailJobStatus(currentBuild.result)
}
